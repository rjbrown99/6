Index: modules/taxonomy/taxonomy.module
===================================================================
--- modules/taxonomy/taxonomy.module	(revision 1846)
+++ modules/taxonomy/taxonomy.module	(working copy)
@@ -469,8 +469,10 @@
  *
  * @param $type
  *   If set, return only those vocabularies associated with this node type.
+ * @param $reset
+ *   If set, reset the cache for this vocabulary.
  */
-function taxonomy_get_vocabularies($type = NULL) {
+function taxonomy_get_vocabularies($type = NULL, $reset = FALSE) {
   static $vocabularies_cache = array();
   static $vocabularies_null;
   
@@ -501,6 +503,9 @@
       $voc->nodes = array();
     }
     $vocabularies[$voc->vid] = $voc;
+    if ($reset) {
+      cache_set('vocabulary::'. $vid, $voc, 'cache_taxonomy');
+    }
   }
 
   if ($type) {
@@ -648,16 +653,28 @@
 function taxonomy_node_get_terms($node, $key = 'tid', $reset = FALSE) {
   static $terms;
 
-  if ($reset) {
+  $cache_key = 'node::'. $node->vid. '::'. $key;
+  if (!$cache = cache_get($cache_key, 'cache_taxonomy') || isset($reset)) {
     unset($terms[$node->vid]);
   }
 
   if (!isset($terms[$node->vid][$key])) {
-    $result = db_query(db_rewrite_sql('SELECT t.*,v.weight AS v_weight_unused FROM {term_node} r INNER JOIN {term_data} t ON r.tid = t.tid INNER JOIN {vocabulary} v ON t.vid = v.vid WHERE r.vid = %d ORDER BY v.weight, t.weight, t.name', 't', 'tid'), $node->vid);
-    $terms[$node->vid][$key] = array();
-    while ($term = db_fetch_object($result)) {
-      $terms[$node->vid][$key][$term->$key] = $term;
+    // This caching breaks taxonomy access! The results of db_rewrite_sql will
+    // be cached, meaning the first user to load this node after a cache
+    // refresh will set the permissions for everyone. If you are using a module
+    // that does query rewriting on taxonomy queries, don't use this patch.
+    // If you're not sure whether or not this is the case, don't use this patch!
+    if ($cache) {
+      $terms[$node->vid][$key] = $cache->data;
     }
+    else {
+      $result = db_query(db_rewrite_sql('SELECT t.* FROM {term_node} r INNER JOIN {term_data} t ON r.tid = t.tid INNER JOIN {vocabulary} v ON t.vid = v.vid WHERE r.vid = %d ORDER BY v.weight, t.weight, t.name', 't', 'tid'), $node->vid);
+      $terms[$node->vid][$key] = array();
+      while ($term = db_fetch_object($result)) {
+        $terms[$node->vid][$key][$term->$key] = $term;
+      }
+      cache_set($cache_key, $terms[$node->vid][$key], 'cache_taxonomy');
+    }
   }
   return $terms[$node->vid][$key];
 }
@@ -864,6 +881,16 @@
 function taxonomy_get_tree($vid, $parent = 0, $depth = -1, $max_depth = NULL) {
   static $children, $parents, $terms;
 
+  $cache_tree = FALSE;
+  if ((0 === $parent) && (-1 === $depth)) {
+    if ($cache = cache_get('tree::'. $vid, 'cache_taxonomy')) {
+      return $cache->data;
+    }
+    else {
+      $cache_tree = TRUE;
+    }
+  }
+
   // We cache trees, so it's not CPU-intensive to call get_tree() on a term
   // and its children, too.
   if (!isset($children[$vid])) {
@@ -935,6 +962,10 @@
     }
   }
 
+  if ($cache_tree) {
+    cache_set('tree::'. $vid, $tree, 'cache_taxonomy');
+  }
+
   return $tree;
 }
 
@@ -1065,7 +1096,12 @@
   }
 
   if (!isset($vocabularies[$vid])) {
-    $vocabularies = taxonomy_get_vocabularies();
+    if ($cache = cache_get('vocabulary::'. $vid, 'cache_taxonomy')) {
+      $vocabularies[$vid] = $cache->data;
+    }
+    else {
+      $vocabularies = taxonomy_get_vocabularies(NULL, TRUE);
+    }
   }
 
   // Return FALSE if this vocabulary does not exist.
@@ -1091,7 +1127,13 @@
   }
 
   if (!isset($terms[$tid])) {
-    $terms[$tid] = db_fetch_object(db_query('SELECT * FROM {term_data} WHERE tid = %d', $tid));
+    if ($cache = cache_get('term::'. $tid, 'cache_taxonomy')) {
+      $terms[$tid] = $cache->data;
+    }
+    else {
+      $terms[$tid] = db_fetch_object(db_query('SELECT * FROM {term_data} WHERE tid = %d', $tid));
+      cache_set('term::'. $tid, $terms[$tid], 'cache_taxonomy');
+    }
   }
 
   return $terms[$tid];
